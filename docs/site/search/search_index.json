{
    "docs": [
        {
            "location": "/",
            "text": "Dataverk\n\n\nGet started\n\n\nFra scratch - nytt dataverk prosjekt\n\n\n\n\nOpprett repository p\u00e5 github\n\n\nKlon github repository lokalt p\u00e5 din maskin\n\n\npip3 install dataverk\n\n\ndataverk create_settings\n\n\nfyll ut den genererte settings.json filen med data\n\n\n\n\nLage en ny datapakke i eksisterende repository\n\n\n\n\nHvis du ikke har en .env fil kj\u00f8r; \ndataverk create_env_file\n\n\ndataverk create\n\n\njupyter notebook\n\n\n\u00e5pne datapakke-navn/scripts/etl.ipynb\n\n\nImplementer data prosesseringen\n\n\npush prosjekt endringene til github (\ngit push orgin master\n)\n\n\n\n\nMetoder for tilgang til datasett.\n\n\nForbindelser (source & sink med kryptering)\n\n\n\n\nFil \n\n\nJsonStat\n\n\nOracle\n\n\nGoogle Cloud Storage\n\n\n...\n\n\n\n\nFormater\n\n\n\n\nPandas\n\n\nArrow\n\n\nCSV\n\n\nExcel\n\n\nJsonStat\n\n\nVega & Vega Lite\n\n\nSemiotic\n\n\n...\n\n\n\n\nDashboards\n\n\nRelaterte  prosjekter\n\n\n\n\n\n\n\n\nurl\n\n\nbeskrivelse\n\n\n\n\n\n\n\n\n\n\nfrictionlessdata.io\n\n\nFrictionless data\n\n\n\n\n\n\ngit lfs\n\n\nGithub Large File Storage\n\n\n\n\n\n\ndvc.org\n\n\nData Science Version Control\n\n\n\n\n\n\nquilt (github)\n\n\nQuilt - Version and deploy data\n\n\n\n\n\n\nPython package in S3\n\n\nCLI tool for creating a Python Package Repo i S3\n\n\n\n\n\n\npypiserver based on bottle\n\n\nMinimal PyPI server",
            "title": "Home"
        },
        {
            "location": "/#get-started",
            "text": "",
            "title": "Get started"
        },
        {
            "location": "/#fra-scratch-nytt-dataverk-prosjekt",
            "text": "Opprett repository p\u00e5 github  Klon github repository lokalt p\u00e5 din maskin  pip3 install dataverk  dataverk create_settings  fyll ut den genererte settings.json filen med data",
            "title": "Fra scratch - nytt dataverk prosjekt"
        },
        {
            "location": "/#lage-en-ny-datapakke-i-eksisterende-repository",
            "text": "Hvis du ikke har en .env fil kj\u00f8r;  dataverk create_env_file  dataverk create  jupyter notebook  \u00e5pne datapakke-navn/scripts/etl.ipynb  Implementer data prosesseringen  push prosjekt endringene til github ( git push orgin master )",
            "title": "Lage en ny datapakke i eksisterende repository"
        },
        {
            "location": "/#metoder-for-tilgang-til-datasett",
            "text": "",
            "title": "Metoder for tilgang til datasett."
        },
        {
            "location": "/#forbindelser-source-sink-med-kryptering",
            "text": "Fil   JsonStat  Oracle  Google Cloud Storage  ...",
            "title": "Forbindelser (source &amp; sink med kryptering)"
        },
        {
            "location": "/#formater",
            "text": "Pandas  Arrow  CSV  Excel  JsonStat  Vega & Vega Lite  Semiotic  ...",
            "title": "Formater"
        },
        {
            "location": "/#dashboards",
            "text": "",
            "title": "Dashboards"
        },
        {
            "location": "/#relaterte-prosjekter",
            "text": "url  beskrivelse      frictionlessdata.io  Frictionless data    git lfs  Github Large File Storage    dvc.org  Data Science Version Control    quilt (github)  Quilt - Version and deploy data    Python package in S3  CLI tool for creating a Python Package Repo i S3    pypiserver based on bottle  Minimal PyPI server",
            "title": "Relaterte  prosjekter"
        },
        {
            "location": "/getting-started/installation/",
            "text": "Installasjon\n\n\nmkdir nytt-prosjekt\npip install dataverk\ndataverk create # you will be prompted with further instructions",
            "title": "Installation"
        },
        {
            "location": "/getting-started/installation/#installasjon",
            "text": "mkdir nytt-prosjekt\npip install dataverk\ndataverk create # you will be prompted with further instructions",
            "title": "Installasjon"
        },
        {
            "location": "/getting-started/faq/",
            "text": "FAQ",
            "title": "FAQ"
        },
        {
            "location": "/getting-started/faq/#faq",
            "text": "",
            "title": "FAQ"
        },
        {
            "location": "/api/",
            "text": "publish_datapackage\n\n\ndataverk.api.publish_datapackage(datasets, destination='nais')\n\n\n\n\n\n\nwrite_datapackage\n\n\ndataverk.api.write_datapackage(datasets)\n\n\n\n\n\n\nis_sql_file\n\n\ndataverk.api.is_sql_file(source)\n\n\n\n\n\n\nread_sql\n\n\ndataverk.api.read_sql(source, sql, connector='Oracle')\n\n\n\n\nRead pandas dataframe from SQL database \n\n\n\n\nto_sql\n\n\ndataverk.api.to_sql(df, table, sink=None, schema=None, connector='Oracle')\n\n\n\n\nWrite records in dataframe to a SQL database table\n\n\nnotebook2script\n\n\ndataverk.utils.notebook2script(fname=None)\n\n\n\n\n\n\nwrite_notebook\n\n\ndataverk.api.write_notebook()",
            "title": "API"
        },
        {
            "location": "/api/#publish_datapackage",
            "text": "dataverk.api.publish_datapackage(datasets, destination='nais')",
            "title": "publish_datapackage"
        },
        {
            "location": "/api/#write_datapackage",
            "text": "dataverk.api.write_datapackage(datasets)",
            "title": "write_datapackage"
        },
        {
            "location": "/api/#is_sql_file",
            "text": "dataverk.api.is_sql_file(source)",
            "title": "is_sql_file"
        },
        {
            "location": "/api/#read_sql",
            "text": "dataverk.api.read_sql(source, sql, connector='Oracle')  Read pandas dataframe from SQL database",
            "title": "read_sql"
        },
        {
            "location": "/api/#to_sql",
            "text": "dataverk.api.to_sql(df, table, sink=None, schema=None, connector='Oracle')",
            "title": "to_sql"
        },
        {
            "location": "/api/#write-records-in-dataframe-to-a-sql-database-table",
            "text": "",
            "title": "Write records in dataframe to a SQL database table"
        },
        {
            "location": "/api/#notebook2script",
            "text": "dataverk.utils.notebook2script(fname=None)",
            "title": "notebook2script"
        },
        {
            "location": "/api/#write_notebook",
            "text": "dataverk.api.write_notebook()",
            "title": "write_notebook"
        },
        {
            "location": "/datapackage/",
            "text": "[source]\n\n\nDatapackage class\n\n\ndataverk.datapackage.Datapackage(resource_files=None, search_start_path='.')\n\n\n\n\n\n\nDatapackage methods\n\n\nadd_resource\n\n\nadd_resource(df, dataset_name, dataset_description='')\n\n\n\n\n\n\nadd_view\n\n\nadd_view(name, resource, columns, view_type='Simple', title='', description='')\n\n\n\n\n\n\nread_sql\n\n\nread_sql(source, sql, dataset_name=None, connector='Oracle', dataset_description='')\n\n\n\n\nRead pandas dataframe from SQL database\n\n\n\n\nto_sql\n\n\nto_sql(df, table, schema, sink, connector='Oracle')\n\n\n\n\nWrite records in dataframe to a SQL database table\n\n\nupdate_metadata\n\n\nupdate_metadata(key, value)\n\n\n\n\n\n\nwrite_datapackage\n\n\nwrite_datapackage()",
            "title": "Datapackage"
        },
        {
            "location": "/datapackage/#datapackage-class",
            "text": "dataverk.datapackage.Datapackage(resource_files=None, search_start_path='.')",
            "title": "Datapackage class"
        },
        {
            "location": "/datapackage/#datapackage-methods",
            "text": "",
            "title": "Datapackage methods"
        },
        {
            "location": "/datapackage/#add_resource",
            "text": "add_resource(df, dataset_name, dataset_description='')",
            "title": "add_resource"
        },
        {
            "location": "/datapackage/#add_view",
            "text": "add_view(name, resource, columns, view_type='Simple', title='', description='')",
            "title": "add_view"
        },
        {
            "location": "/datapackage/#read_sql",
            "text": "read_sql(source, sql, dataset_name=None, connector='Oracle', dataset_description='')  Read pandas dataframe from SQL database",
            "title": "read_sql"
        },
        {
            "location": "/datapackage/#to_sql",
            "text": "to_sql(df, table, schema, sink, connector='Oracle')",
            "title": "to_sql"
        },
        {
            "location": "/datapackage/#write-records-in-dataframe-to-a-sql-database-table",
            "text": "",
            "title": "Write records in dataframe to a SQL database table"
        },
        {
            "location": "/datapackage/#update_metadata",
            "text": "update_metadata(key, value)",
            "title": "update_metadata"
        },
        {
            "location": "/datapackage/#write_datapackage",
            "text": "write_datapackage()",
            "title": "write_datapackage"
        },
        {
            "location": "/connectors/connectors/",
            "text": "[source]\n\n\nBaseConnector class\n\n\ndataverk.connectors.base.BaseConnector(encrypted=True)\n\n\n\n\nCommon connection methods\n\n\n\n\nBaseConnector methods\n\n\nget_pandas_df\n\n\nget_pandas_df(query)\n\n\n\n\nGet Pandas\n\n\nMethod inherited from BaseConnector\n\n\n\n\nget_user\n\n\ndataverk.utils.get_user()\n\n\n\n\nGet currently logged in user\n\n\nInherited from AuthMixin class \n\n\n\n\nis_authorized\n\n\ndataverk.utils.is_authorized(user=None)\n\n\n\n\nCheck if is user is authorized to access data source\n\n\nInherited from AuthMixin class \n\n\n\n\nlog\n\n\nlog(message)\n\n\n\n\nLogging util\n\n\nMethod inherited from BaseConnector\n\n\n\n\n[source]\n\n\nJSONStatConnector class\n\n\ndataverk.connectors.jsonstat.JSONStatConnector()\n\n\n\n\nJSONStat based connections\n\n\n\n\nJSONStatConnector methods\n\n\nget_pandas_df\n\n\nget_pandas_df(query)\n\n\n\n\nGet Pandas dataframe\n\n\n\n\nget_user\n\n\ndataverk.utils.get_user()\n\n\n\n\nGet currently logged in user\n\n\nInherited from AuthMixin class \n\n\n\n\nis_authorized\n\n\ndataverk.utils.is_authorized(user=None)\n\n\n\n\nCheck if is user is authorized to access data source\n\n\nInherited from AuthMixin class \n\n\n\n\nlog\n\n\nlog(message)\n\n\n\n\nLogging util\n\n\nMethod inherited from BaseConnector\n\n\n\n\n[source]\n\n\nStorageConnector class\n\n\ndataverk.connectors.storage.StorageConnector(settings, storage='gcs', encrypted=True)\n\n\n\n\nStorage connection\n\n\n\n\nStorageConnector methods\n\n\nget_blob_metadata\n\n\nget_blob_metadata(blob_name, format='markdown')\n\n\n\n\nGet metadata from blob storage\n\n\n\n\nget_pandas_df\n\n\nget_pandas_df(query)\n\n\n\n\nGet Pandas\n\n\nMethod inherited from BaseConnector\n\n\n\n\nget_user\n\n\ndataverk.utils.get_user()\n\n\n\n\nGet currently logged in user\n\n\nInherited from AuthMixin class \n\n\n\n\nis_authorized\n\n\ndataverk.utils.is_authorized(user=None)\n\n\n\n\nCheck if is user is authorized to access data source\n\n\nInherited from AuthMixin class \n\n\n\n\nlog\n\n\nlog(message)\n\n\n\n\nLogging util\n\n\nMethod inherited from BaseConnector\n\n\n\n\nread\n\n\nread(blob_name, encrypted=None)\n\n\n\n\nDownload from blob storage\n\n\n\n\nwrite\n\n\nwrite(source_string, destination_blob_name, fmt='json', metadata={})\n\n\n\n\nUpload to blob storage\n\n\n\n\n[source]\n\n\nFileStorageConnector class\n\n\ndataverk.connectors.file_storage.FileStorageConnector(settings, encrypted=True, bucket=None)\n\n\n\n\nFile Storage connector\n\n\n\n\nFileStorageConnector methods\n\n\ndelete\n\n\ndelete(file_name)\n\n\n\n\n\n\ndownload\n\n\ndownload(blob_name, destination_file_name)\n\n\n\n\n\n\nget_blob_metadata\n\n\nget_blob_metadata(blob_name, format='markdown')\n\n\n\n\nGet a blob's metadata.\n\n\n\n\nget_pandas_df\n\n\nget_pandas_df(query)\n\n\n\n\nGet Pandas\n\n\nMethod inherited from BaseConnector\n\n\n\n\nget_user\n\n\ndataverk.utils.get_user()\n\n\n\n\nGet currently logged in user\n\n\nInherited from AuthMixin class \n\n\n\n\nis_authorized\n\n\ndataverk.utils.is_authorized(user=None)\n\n\n\n\nCheck if is user is authorized to access data source\n\n\nInherited from AuthMixin class \n\n\n\n\nlog\n\n\nlog(message)\n\n\n\n\nLogging util\n\n\nMethod inherited from BaseConnector\n\n\n\n\nread\n\n\nread(file_name)\n\n\n\n\nDownloads a blob from the bucket.\n\n\nwrite\n\n\nwrite(source_string, destination_blob_name, fmt, metadata=None)\n\n\n\n\n\n\n[source]\n\n\nOracleConnector class\n\n\ndataverk.connectors.oracle.OracleConnector(settings, source=None)\n\n\n\n\nCommon oracle connector methods\n\n\nTroubleshooting:\n\n\nNote: Oracle instant client libraries required to be installed in order to use cx_Oracle\n\n\nMac:\n\n\n\u00b4\u00b4\u00b4\nunzip instant client zip file from oracle to ~/opt/oracle/instantclient_12_2\nln -s ~/opt/oracle/instantclient_12_2/libclntsh.dylib.12.1 /usr/local/lib/\n\u00b4\u00b4\u00b4\n\n\n\n\nOracleConnector methods\n\n\nget_pandas_df\n\n\nget_pandas_df(sql, arraysize=100000)\n\n\n\n\n\n\nget_user\n\n\ndataverk.utils.get_user()\n\n\n\n\nGet currently logged in user\n\n\nInherited from AuthMixin class \n\n\n\n\nis_authorized\n\n\ndataverk.utils.is_authorized(user=None)\n\n\n\n\nCheck if is user is authorized to access data source\n\n\nInherited from AuthMixin class \n\n\n\n\nlog\n\n\nlog(message)\n\n\n\n\nLogging util\n\n\nMethod inherited from BaseConnector\n\n\n\n\npersist_pandas_df\n\n\npersist_pandas_df(table, schema=None, df=None, chunksize=10000)\n\n\n\n\n\n\n[source]\n\n\nGoogleStorageConnector class\n\n\ndataverk.connectors.google_storage.GoogleStorageConnector(bucket_name, settings, encrypted=True)\n\n\n\n\nGoogle Storage connector\n\n\n\n\nGoogleStorageConnector methods\n\n\ndelete_blob\n\n\ndelete_blob(blob_name)\n\n\n\n\nDeletes a blob from the bucket.\n\n\ndownload_blob\n\n\ndownload_blob(blob_name, destination_file_name)\n\n\n\n\nDownloads a blob from the bucket.\n\n\nget_blob_metadata\n\n\nget_blob_metadata(blob_name, format='markdown')\n\n\n\n\nPrints out a blob's metadata.\n\n\nget_pandas_df\n\n\nget_pandas_df(query)\n\n\n\n\nGet Pandas\n\n\nMethod inherited from BaseConnector\n\n\n\n\nget_user\n\n\ndataverk.utils.get_user()\n\n\n\n\nGet currently logged in user\n\n\nInherited from AuthMixin class \n\n\n\n\nis_authorized\n\n\ndataverk.utils.is_authorized(user=None)\n\n\n\n\nCheck if is user is authorized to access data source\n\n\nInherited from AuthMixin class \n\n\n\n\nlog\n\n\nlog(message)\n\n\n\n\nLogging util\n\n\nMethod inherited from BaseConnector\n\n\n\n\nread\n\n\nread(blob_name)\n\n\n\n\nDownloads a blob from the bucket.\n\n\nupload_blob\n\n\nupload_blob(source_file_name, destination_blob_name)\n\n\n\n\nUploads a file to the bucket.\n\n\nwrite\n\n\nwrite(source_string, destination_blob_name, fmt, metadata={})\n\n\n\n\nWrite string to a bucket.\n\n\n[source]\n\n\nElasticsearchConnector class\n\n\ndataverk.connectors.elasticsearch.ElasticsearchConnector(settings, host='elastic_private')\n\n\n\n\nElasticsearch connection\n\n\n\n\nElasticsearchConnector methods\n\n\nget\n\n\nget(id)\n\n\n\n\nRetrieve document by id from elastic index\n\n\nget_pandas_df\n\n\nget_pandas_df(query)\n\n\n\n\nGet Pandas\n\n\nMethod inherited from BaseConnector\n\n\n\n\nget_user\n\n\ndataverk.utils.get_user()\n\n\n\n\nGet currently logged in user\n\n\nInherited from AuthMixin class \n\n\n\n\nis_authorized\n\n\ndataverk.utils.is_authorized(user=None)\n\n\n\n\nCheck if is user is authorized to access data source\n\n\nInherited from AuthMixin class \n\n\n\n\nlog\n\n\nlog(message)\n\n\n\n\nLogging util\n\n\nMethod inherited from BaseConnector\n\n\n\n\nsearch\n\n\nsearch(query)\n\n\n\n\nSearch elastic index\n\n\nwrite\n\n\nwrite(id, doc)\n\n\n\n\nAdd or update document\n\n\n[source]\n\n\nSQLiteConnector class\n\n\ndataverk.connectors.sqlite.SQLiteConnector(source=':memory:')\n\n\n\n\n\n\nSQLiteConnector methods\n\n\nget_pandas_df\n\n\nget_pandas_df(query)\n\n\n\n\nGet Pandas dataframe\n\n\nget_user\n\n\ndataverk.utils.get_user()\n\n\n\n\nGet currently logged in user\n\n\nInherited from AuthMixin class \n\n\n\n\nis_authorized\n\n\ndataverk.utils.is_authorized(user=None)\n\n\n\n\nCheck if is user is authorized to access data source\n\n\nInherited from AuthMixin class \n\n\n\n\nlog\n\n\nlog(message)\n\n\n\n\nLogging util\n\n\nMethod inherited from BaseConnector\n\n\n\n\npersist_pandas_df\n\n\npersist_pandas_df(table, df)\n\n\n\n\nPersist Pandas dataframe",
            "title": "Connectors"
        },
        {
            "location": "/connectors/connectors/#baseconnector-class",
            "text": "dataverk.connectors.base.BaseConnector(encrypted=True)  Common connection methods",
            "title": "BaseConnector class"
        },
        {
            "location": "/connectors/connectors/#baseconnector-methods",
            "text": "",
            "title": "BaseConnector methods"
        },
        {
            "location": "/connectors/connectors/#get_pandas_df",
            "text": "get_pandas_df(query)  Get Pandas  Method inherited from BaseConnector",
            "title": "get_pandas_df"
        },
        {
            "location": "/connectors/connectors/#get_user",
            "text": "dataverk.utils.get_user()  Get currently logged in user  Inherited from AuthMixin class",
            "title": "get_user"
        },
        {
            "location": "/connectors/connectors/#is_authorized",
            "text": "dataverk.utils.is_authorized(user=None)  Check if is user is authorized to access data source  Inherited from AuthMixin class",
            "title": "is_authorized"
        },
        {
            "location": "/connectors/connectors/#log",
            "text": "log(message)  Logging util  Method inherited from BaseConnector   [source]",
            "title": "log"
        },
        {
            "location": "/connectors/connectors/#jsonstatconnector-class",
            "text": "dataverk.connectors.jsonstat.JSONStatConnector()  JSONStat based connections",
            "title": "JSONStatConnector class"
        },
        {
            "location": "/connectors/connectors/#jsonstatconnector-methods",
            "text": "",
            "title": "JSONStatConnector methods"
        },
        {
            "location": "/connectors/connectors/#get_pandas_df_1",
            "text": "get_pandas_df(query)  Get Pandas dataframe",
            "title": "get_pandas_df"
        },
        {
            "location": "/connectors/connectors/#get_user_1",
            "text": "dataverk.utils.get_user()  Get currently logged in user  Inherited from AuthMixin class",
            "title": "get_user"
        },
        {
            "location": "/connectors/connectors/#is_authorized_1",
            "text": "dataverk.utils.is_authorized(user=None)  Check if is user is authorized to access data source  Inherited from AuthMixin class",
            "title": "is_authorized"
        },
        {
            "location": "/connectors/connectors/#log_1",
            "text": "log(message)  Logging util  Method inherited from BaseConnector   [source]",
            "title": "log"
        },
        {
            "location": "/connectors/connectors/#storageconnector-class",
            "text": "dataverk.connectors.storage.StorageConnector(settings, storage='gcs', encrypted=True)  Storage connection",
            "title": "StorageConnector class"
        },
        {
            "location": "/connectors/connectors/#storageconnector-methods",
            "text": "",
            "title": "StorageConnector methods"
        },
        {
            "location": "/connectors/connectors/#get_blob_metadata",
            "text": "get_blob_metadata(blob_name, format='markdown')  Get metadata from blob storage",
            "title": "get_blob_metadata"
        },
        {
            "location": "/connectors/connectors/#get_pandas_df_2",
            "text": "get_pandas_df(query)  Get Pandas  Method inherited from BaseConnector",
            "title": "get_pandas_df"
        },
        {
            "location": "/connectors/connectors/#get_user_2",
            "text": "dataverk.utils.get_user()  Get currently logged in user  Inherited from AuthMixin class",
            "title": "get_user"
        },
        {
            "location": "/connectors/connectors/#is_authorized_2",
            "text": "dataverk.utils.is_authorized(user=None)  Check if is user is authorized to access data source  Inherited from AuthMixin class",
            "title": "is_authorized"
        },
        {
            "location": "/connectors/connectors/#log_2",
            "text": "log(message)  Logging util  Method inherited from BaseConnector",
            "title": "log"
        },
        {
            "location": "/connectors/connectors/#read",
            "text": "read(blob_name, encrypted=None)  Download from blob storage",
            "title": "read"
        },
        {
            "location": "/connectors/connectors/#write",
            "text": "write(source_string, destination_blob_name, fmt='json', metadata={})  Upload to blob storage   [source]",
            "title": "write"
        },
        {
            "location": "/connectors/connectors/#filestorageconnector-class",
            "text": "dataverk.connectors.file_storage.FileStorageConnector(settings, encrypted=True, bucket=None)  File Storage connector",
            "title": "FileStorageConnector class"
        },
        {
            "location": "/connectors/connectors/#filestorageconnector-methods",
            "text": "",
            "title": "FileStorageConnector methods"
        },
        {
            "location": "/connectors/connectors/#delete",
            "text": "delete(file_name)",
            "title": "delete"
        },
        {
            "location": "/connectors/connectors/#download",
            "text": "download(blob_name, destination_file_name)",
            "title": "download"
        },
        {
            "location": "/connectors/connectors/#get_blob_metadata_1",
            "text": "get_blob_metadata(blob_name, format='markdown')  Get a blob's metadata.",
            "title": "get_blob_metadata"
        },
        {
            "location": "/connectors/connectors/#get_pandas_df_3",
            "text": "get_pandas_df(query)  Get Pandas  Method inherited from BaseConnector",
            "title": "get_pandas_df"
        },
        {
            "location": "/connectors/connectors/#get_user_3",
            "text": "dataverk.utils.get_user()  Get currently logged in user  Inherited from AuthMixin class",
            "title": "get_user"
        },
        {
            "location": "/connectors/connectors/#is_authorized_3",
            "text": "dataverk.utils.is_authorized(user=None)  Check if is user is authorized to access data source  Inherited from AuthMixin class",
            "title": "is_authorized"
        },
        {
            "location": "/connectors/connectors/#log_3",
            "text": "log(message)  Logging util  Method inherited from BaseConnector",
            "title": "log"
        },
        {
            "location": "/connectors/connectors/#read_1",
            "text": "read(file_name)",
            "title": "read"
        },
        {
            "location": "/connectors/connectors/#downloads-a-blob-from-the-bucket",
            "text": "",
            "title": "Downloads a blob from the bucket."
        },
        {
            "location": "/connectors/connectors/#write_1",
            "text": "write(source_string, destination_blob_name, fmt, metadata=None)   [source]",
            "title": "write"
        },
        {
            "location": "/connectors/connectors/#oracleconnector-class",
            "text": "dataverk.connectors.oracle.OracleConnector(settings, source=None)  Common oracle connector methods  Troubleshooting:  Note: Oracle instant client libraries required to be installed in order to use cx_Oracle  Mac:  \u00b4\u00b4\u00b4\nunzip instant client zip file from oracle to ~/opt/oracle/instantclient_12_2\nln -s ~/opt/oracle/instantclient_12_2/libclntsh.dylib.12.1 /usr/local/lib/\n\u00b4\u00b4\u00b4",
            "title": "OracleConnector class"
        },
        {
            "location": "/connectors/connectors/#oracleconnector-methods",
            "text": "",
            "title": "OracleConnector methods"
        },
        {
            "location": "/connectors/connectors/#get_pandas_df_4",
            "text": "get_pandas_df(sql, arraysize=100000)",
            "title": "get_pandas_df"
        },
        {
            "location": "/connectors/connectors/#get_user_4",
            "text": "dataverk.utils.get_user()  Get currently logged in user  Inherited from AuthMixin class",
            "title": "get_user"
        },
        {
            "location": "/connectors/connectors/#is_authorized_4",
            "text": "dataverk.utils.is_authorized(user=None)  Check if is user is authorized to access data source  Inherited from AuthMixin class",
            "title": "is_authorized"
        },
        {
            "location": "/connectors/connectors/#log_4",
            "text": "log(message)  Logging util  Method inherited from BaseConnector",
            "title": "log"
        },
        {
            "location": "/connectors/connectors/#persist_pandas_df",
            "text": "persist_pandas_df(table, schema=None, df=None, chunksize=10000)   [source]",
            "title": "persist_pandas_df"
        },
        {
            "location": "/connectors/connectors/#googlestorageconnector-class",
            "text": "dataverk.connectors.google_storage.GoogleStorageConnector(bucket_name, settings, encrypted=True)  Google Storage connector",
            "title": "GoogleStorageConnector class"
        },
        {
            "location": "/connectors/connectors/#googlestorageconnector-methods",
            "text": "",
            "title": "GoogleStorageConnector methods"
        },
        {
            "location": "/connectors/connectors/#delete_blob",
            "text": "delete_blob(blob_name)",
            "title": "delete_blob"
        },
        {
            "location": "/connectors/connectors/#deletes-a-blob-from-the-bucket",
            "text": "",
            "title": "Deletes a blob from the bucket."
        },
        {
            "location": "/connectors/connectors/#download_blob",
            "text": "download_blob(blob_name, destination_file_name)",
            "title": "download_blob"
        },
        {
            "location": "/connectors/connectors/#downloads-a-blob-from-the-bucket_1",
            "text": "",
            "title": "Downloads a blob from the bucket."
        },
        {
            "location": "/connectors/connectors/#get_blob_metadata_2",
            "text": "get_blob_metadata(blob_name, format='markdown')",
            "title": "get_blob_metadata"
        },
        {
            "location": "/connectors/connectors/#prints-out-a-blobs-metadata",
            "text": "",
            "title": "Prints out a blob's metadata."
        },
        {
            "location": "/connectors/connectors/#get_pandas_df_5",
            "text": "get_pandas_df(query)  Get Pandas  Method inherited from BaseConnector",
            "title": "get_pandas_df"
        },
        {
            "location": "/connectors/connectors/#get_user_5",
            "text": "dataverk.utils.get_user()  Get currently logged in user  Inherited from AuthMixin class",
            "title": "get_user"
        },
        {
            "location": "/connectors/connectors/#is_authorized_5",
            "text": "dataverk.utils.is_authorized(user=None)  Check if is user is authorized to access data source  Inherited from AuthMixin class",
            "title": "is_authorized"
        },
        {
            "location": "/connectors/connectors/#log_5",
            "text": "log(message)  Logging util  Method inherited from BaseConnector",
            "title": "log"
        },
        {
            "location": "/connectors/connectors/#read_2",
            "text": "read(blob_name)",
            "title": "read"
        },
        {
            "location": "/connectors/connectors/#downloads-a-blob-from-the-bucket_2",
            "text": "",
            "title": "Downloads a blob from the bucket."
        },
        {
            "location": "/connectors/connectors/#upload_blob",
            "text": "upload_blob(source_file_name, destination_blob_name)",
            "title": "upload_blob"
        },
        {
            "location": "/connectors/connectors/#uploads-a-file-to-the-bucket",
            "text": "",
            "title": "Uploads a file to the bucket."
        },
        {
            "location": "/connectors/connectors/#write_2",
            "text": "write(source_string, destination_blob_name, fmt, metadata={})",
            "title": "write"
        },
        {
            "location": "/connectors/connectors/#write-string-to-a-bucket",
            "text": "[source]",
            "title": "Write string to a bucket."
        },
        {
            "location": "/connectors/connectors/#elasticsearchconnector-class",
            "text": "dataverk.connectors.elasticsearch.ElasticsearchConnector(settings, host='elastic_private')  Elasticsearch connection",
            "title": "ElasticsearchConnector class"
        },
        {
            "location": "/connectors/connectors/#elasticsearchconnector-methods",
            "text": "",
            "title": "ElasticsearchConnector methods"
        },
        {
            "location": "/connectors/connectors/#get",
            "text": "get(id)",
            "title": "get"
        },
        {
            "location": "/connectors/connectors/#retrieve-document-by-id-from-elastic-index",
            "text": "",
            "title": "Retrieve document by id from elastic index"
        },
        {
            "location": "/connectors/connectors/#get_pandas_df_6",
            "text": "get_pandas_df(query)  Get Pandas  Method inherited from BaseConnector",
            "title": "get_pandas_df"
        },
        {
            "location": "/connectors/connectors/#get_user_6",
            "text": "dataverk.utils.get_user()  Get currently logged in user  Inherited from AuthMixin class",
            "title": "get_user"
        },
        {
            "location": "/connectors/connectors/#is_authorized_6",
            "text": "dataverk.utils.is_authorized(user=None)  Check if is user is authorized to access data source  Inherited from AuthMixin class",
            "title": "is_authorized"
        },
        {
            "location": "/connectors/connectors/#log_6",
            "text": "log(message)  Logging util  Method inherited from BaseConnector",
            "title": "log"
        },
        {
            "location": "/connectors/connectors/#search",
            "text": "search(query)",
            "title": "search"
        },
        {
            "location": "/connectors/connectors/#search-elastic-index",
            "text": "",
            "title": "Search elastic index"
        },
        {
            "location": "/connectors/connectors/#write_3",
            "text": "write(id, doc)",
            "title": "write"
        },
        {
            "location": "/connectors/connectors/#add-or-update-document",
            "text": "[source]",
            "title": "Add or update document"
        },
        {
            "location": "/connectors/connectors/#sqliteconnector-class",
            "text": "dataverk.connectors.sqlite.SQLiteConnector(source=':memory:')",
            "title": "SQLiteConnector class"
        },
        {
            "location": "/connectors/connectors/#sqliteconnector-methods",
            "text": "",
            "title": "SQLiteConnector methods"
        },
        {
            "location": "/connectors/connectors/#get_pandas_df_7",
            "text": "get_pandas_df(query)",
            "title": "get_pandas_df"
        },
        {
            "location": "/connectors/connectors/#get-pandas-dataframe",
            "text": "",
            "title": "Get Pandas dataframe"
        },
        {
            "location": "/connectors/connectors/#get_user_7",
            "text": "dataverk.utils.get_user()  Get currently logged in user  Inherited from AuthMixin class",
            "title": "get_user"
        },
        {
            "location": "/connectors/connectors/#is_authorized_7",
            "text": "dataverk.utils.is_authorized(user=None)  Check if is user is authorized to access data source  Inherited from AuthMixin class",
            "title": "is_authorized"
        },
        {
            "location": "/connectors/connectors/#log_7",
            "text": "log(message)  Logging util  Method inherited from BaseConnector",
            "title": "log"
        },
        {
            "location": "/connectors/connectors/#persist_pandas_df_1",
            "text": "persist_pandas_df(table, df)  Persist Pandas dataframe",
            "title": "persist_pandas_df"
        },
        {
            "location": "/utils/",
            "text": "[source]\n\n\nAuthMixin\n\n\ndataverk.utils.AuthMixin()\n\n\n\n\nAuthenticator\n\n\n[source]\n\n\nLoggerMixin\n\n\ndataverk.utils.LoggerMixin()\n\n\n\n\nLogger with timestamps\n\n\n\n\nget_fylke_from_region\n\n\ndataverk.utils.get_fylke_from_region(region)\n\n\n\n\nGet current name for fylke\n\n\nS\u00f8r-, og Nord-Tr\u00f8ndelag er sl\u00e5tt sammen til Tr\u00f8ndelag",
            "title": "Utils"
        },
        {
            "location": "/utils/#authmixin",
            "text": "dataverk.utils.AuthMixin()",
            "title": "AuthMixin"
        },
        {
            "location": "/utils/#authenticator",
            "text": "[source]",
            "title": "Authenticator"
        },
        {
            "location": "/utils/#loggermixin",
            "text": "dataverk.utils.LoggerMixin()  Logger with timestamps",
            "title": "LoggerMixin"
        },
        {
            "location": "/utils/#get_fylke_from_region",
            "text": "dataverk.utils.get_fylke_from_region(region)  Get current name for fylke  S\u00f8r-, og Nord-Tr\u00f8ndelag er sl\u00e5tt sammen til Tr\u00f8ndelag",
            "title": "get_fylke_from_region"
        },
        {
            "location": "/context/",
            "text": "[source]\n\n\nEnvStore class\n\n\ndataverk.context.env_store.EnvStore(path, env_setter=None)\n\n\n\n\nMapping object for storing and easy accessing of Environment variables\n\n\n\n\nEnvStore methods\n\n\nget\n\n\nget(key)\n\n\n\n\n\n\nitems\n\n\nitems()\n\n\n\n\n\n\nkeys\n\n\nkeys()\n\n\n\n\n\n\nvalues\n\n\nvalues()\n\n\n\n\n\n\n[source]\n\n\nSettingsStore class\n\n\ndataverk.context.settings_classes.SettingsStore(settings_dict)\n\n\n\n\nKlassen har ansvar for \u00e5 gj\u00f8re settings som eksterne URLer, keys, flagg og andre ressurser tilgjengelige\n\n\n\n\nSettingsStore methods\n\n\nget\n\n\nget(key)\n\n\n\n\n\n\nitems\n\n\nitems()\n\n\n\n\n\n\nkeys\n\n\nkeys()\n\n\n\n\n\n\nvalues\n\n\nvalues()\n\n\n\n\n\n\n[source]\n\n\nSettingsBuilder class\n\n\ndataverk.context.settings_classes.SettingsBuilder(settings, env_store=None)\n\n\n\n\nBygger SettingsStore objektet fra json fil og tilgjenngeliggj\u00f8r modifikasjon gjennom apply() metoden.\n\n\n\n\nSettingsBuilder methods\n\n\napply\n\n\napply(modifier)\n\n\n\n\npublic metode som gir eksterne funskjoner tilgang til \u00e5 endre, berike og/eller fjerne felter i settings_store\n\n\n\n\nbuild\n\n\nbuild()\n\n\n\n\n\n\nsingleton_settings_store_factory\n\n\ndataverk.context.settings.singleton_settings_store_factory(settings_file_path=None, env_store=None)\n\n\n\n\nLager et nytt SettingsStore objekt om et ikke allerede har blitt laget. Hvis et SettingsStore objekt har blitt\nlaget returnerer den de istedet.\n\n\n:param settings_file_path: Path til settings.json filen\n:param env_store: EnvStore objekt\n:return: Ferdig konfigurert SettingsStore Objekt\n\n\n\n\nsettings_store_factory\n\n\ndataverk.context.settings.settings_store_factory(settings_file_path, env_store)\n\n\n\n\nLager et nytt SettingsStore objekt fra en settings.json fil og modifiserer den basert p\u00e5 env variabler.\n\n\n:param settings_file_path: Path til settings.json filen\n:param env_store: EnvStore objekt\n:return: Ferdig konfigurert SettingsStore Objekt",
            "title": "Context"
        },
        {
            "location": "/context/#envstore-class",
            "text": "dataverk.context.env_store.EnvStore(path, env_setter=None)  Mapping object for storing and easy accessing of Environment variables",
            "title": "EnvStore class"
        },
        {
            "location": "/context/#envstore-methods",
            "text": "",
            "title": "EnvStore methods"
        },
        {
            "location": "/context/#get",
            "text": "get(key)",
            "title": "get"
        },
        {
            "location": "/context/#items",
            "text": "items()",
            "title": "items"
        },
        {
            "location": "/context/#keys",
            "text": "keys()",
            "title": "keys"
        },
        {
            "location": "/context/#values",
            "text": "values()   [source]",
            "title": "values"
        },
        {
            "location": "/context/#settingsstore-class",
            "text": "dataverk.context.settings_classes.SettingsStore(settings_dict)  Klassen har ansvar for \u00e5 gj\u00f8re settings som eksterne URLer, keys, flagg og andre ressurser tilgjengelige",
            "title": "SettingsStore class"
        },
        {
            "location": "/context/#settingsstore-methods",
            "text": "",
            "title": "SettingsStore methods"
        },
        {
            "location": "/context/#get_1",
            "text": "get(key)",
            "title": "get"
        },
        {
            "location": "/context/#items_1",
            "text": "items()",
            "title": "items"
        },
        {
            "location": "/context/#keys_1",
            "text": "keys()",
            "title": "keys"
        },
        {
            "location": "/context/#values_1",
            "text": "values()   [source]",
            "title": "values"
        },
        {
            "location": "/context/#settingsbuilder-class",
            "text": "dataverk.context.settings_classes.SettingsBuilder(settings, env_store=None)  Bygger SettingsStore objektet fra json fil og tilgjenngeliggj\u00f8r modifikasjon gjennom apply() metoden.",
            "title": "SettingsBuilder class"
        },
        {
            "location": "/context/#settingsbuilder-methods",
            "text": "",
            "title": "SettingsBuilder methods"
        },
        {
            "location": "/context/#apply",
            "text": "apply(modifier)  public metode som gir eksterne funskjoner tilgang til \u00e5 endre, berike og/eller fjerne felter i settings_store",
            "title": "apply"
        },
        {
            "location": "/context/#build",
            "text": "build()",
            "title": "build"
        },
        {
            "location": "/context/#singleton_settings_store_factory",
            "text": "dataverk.context.settings.singleton_settings_store_factory(settings_file_path=None, env_store=None)  Lager et nytt SettingsStore objekt om et ikke allerede har blitt laget. Hvis et SettingsStore objekt har blitt\nlaget returnerer den de istedet.  :param settings_file_path: Path til settings.json filen\n:param env_store: EnvStore objekt\n:return: Ferdig konfigurert SettingsStore Objekt",
            "title": "singleton_settings_store_factory"
        },
        {
            "location": "/context/#settings_store_factory",
            "text": "dataverk.context.settings.settings_store_factory(settings_file_path, env_store)  Lager et nytt SettingsStore objekt fra en settings.json fil og modifiserer den basert p\u00e5 env variabler.  :param settings_file_path: Path til settings.json filen\n:param env_store: EnvStore objekt\n:return: Ferdig konfigurert SettingsStore Objekt",
            "title": "settings_store_factory"
        },
        {
            "location": "/contributing/",
            "text": "Contributing\n\n\nNAVIKT",
            "title": "Contributing"
        },
        {
            "location": "/contributing/#contributing",
            "text": "NAVIKT",
            "title": "Contributing"
        }
    ]
}